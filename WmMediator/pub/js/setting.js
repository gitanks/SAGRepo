
function hideKey() 
{
var keys = [
"pg.keystore.keyStoreHandle" ,
"pg.keystore.trustStoreHandle" ,
"pg.policygateway.targetName" ,
"pg.policygateway.repositoryLocation" ,
"pg.proxyLoader.proxyLocation" ,
"pg.serviceReader.interval" ,
"pg.vsdTransformer.xslFilePath" ,
"pg.jaxbFileStore.consumerFileStore" ,
"pg.jaxbNamesStore.namesFileStore" ,
"pg.email.SenderActive",
"pg.email.smtpHost" ,
"pg.email.smtpPort" ,
"pg.email.from" ,
"pg.email.userName" ,
"pg.email.TLSEnabled" ,
"pg.snmp.customTarget" ,
"pg.snmp.customTarget.sendTraps" ,
"pg.snmp.customTarget.connTimeout" ,
"pg.snmp.communityTarget.base64Encoded" ,
"pg.snmp.communityTarget.communityName" ,
"pg.snmp.communityTarget.transportProtocol" ,
"pg.snmp.communityTarget.ipAddress" ,
"pg.snmp.communityTarget.port" ,
"pg.snmp.communityTarget.retries" ,
"pg.snmp.communityTarget.sendTimeOut" ,
"pg.snmp.communityTarget.maxRequestSize" ,
"pg.snmp.userTarget.userName" ,
"pg.snmp.userTarget.useAuth" ,
"pg.snmp.userTarget.authProtocol",
"pg.snmp.userTarget.usePrivacy" ,
"pg.snmp.userTarget.privProtocol" ,
"pg.snmp.userTarget.transportProtocol" ,
"pg.snmp.userTarget.ipAddress" ,
"pg.snmp.userTarget.port" ,
"pg.snmp.userTarget.retries" ,
"pg.snmp.userTarget.sendTimeOut" ,
"pg.snmp.userTarget.maxRequestSize" ,
"pg.cs.snmpTarget.sendTraps" ,
"pg.cs.snmpTarget.base64Encoded" ,
"pg.cs.snmpTarget.userName" ,
"pg.cs.snmpTarget.useAuth" ,
"pg.cs.snmpTarget.authProtocol" ,
"pg.cs.snmpTarget.usePrivacy" ,
"pg.cs.snmpTarget.privProtocol" ,
"pg.cs.snmpTarget.transportProtocol" ,
"pg.cs.snmpTarget.ipAddress" ,
"pg.cs.snmpTarget.port" ,
"pg.cs.snmpTarget.retries" ,
"pg.cs.snmpTarget.sendTimeOut" ,
"pg.cs.snmpTarget.connTimeout" ,
"pg.cs.snmpTarget.maxRequestSize" ,
"pg.uddiClient.protocol" ,
"pg.uddiClient.hostName" ,
"pg.uddiClient.uddiPort" ,
"pg.uddiClient.userName" ,
"pg.ehcache.config.file" ,
"pg.PgMenConfiguration.reportInterval" ,
"pg.PgMenConfiguration.perfDataEnabled" ,
"pg.PgMenConfiguration.publishLifeCycleEvents" ,
"pg.PgMenConfiguration.publishErrorEvents" ,
"pg.PgMenConfiguration.publishPolicyViolationEvents" ,
"pg.rampartdeploymenthandler.signingCertAlias" ,
"pg.rampartdeploymenthandler.usernameTokenUser" ,
"pg.rampartdeploymenthandler.responseTimeToLive" ,
"pg.lb.http.url" ,
"pg.lb.https.url" ,
"pg.http.ports" ,
"pg.https.ports" ,
"pg.backupFailedProxies" ,
"pg.failedProxies.backupDir" ,
"pg.nerv.PgMenConfiguration.emitToSqlEndpoint" ,
"pg.nerv.jdbc.functional.pool.alias" ,
"pg.nerv.PgMenConfiguration.publishLifeCycleEvents" ,
"pg.nerv.PgMenConfiguration.publishErrorEvents" ,
"pg.nerv.PgMenConfiguration.publishPolicyViolationEvents" ,
"pg.nerv.PgMenConfiguration.perfDataEnabled" ,
"pg.nerv.PgMenConfiguration.reportInterval" ,
"pg.nerv.PgMenConfiguration.emitToDefaultEndpoint" ,
"pg.jaxbFileStore.aliasesFileStore" ,
"pg.jaxbAliasServiceAssociationStore.FileStore",
"pg.apiportal.PgMenConfiguration.perfDataEnabled",
"pg.apiportal.PgMenConfiguration.publishErrorEvents",
"pg.apiportal.PgMenConfiguration.publishLifeCycleEvents",
"pg.apiportal.PgMenConfiguration.publishPolicyViolationEvents",
"pg.apiportal.PgMenConfiguration.reportInterval",
"pg.apiportal.instancesFileStore",
"pg.es.PgMenConfiguration.perfDataEnabled",
"pg.es.PgMenConfiguration.publishErrorEvents",
"pg.es.PgMenConfiguration.publishLifeCycleEvents",
"pg.es.PgMenConfiguration.publishPolicyViolationEvents",
"pg.es.PgMenConfiguration.reportInterval",
"pg.es.hostName",
"pg.es.indexName",
"pg.es.password.changed",
"pg.es.port",
"pg.es.protocol",
"pg.es.userName"
];        
    return keys;
}

function showHiddenKey(hiddenkey)
{
        var key = "";
        for (var i = 0; i < hiddenkey.length; i++){
            key += hiddenkey[i] + " ";
        }
        return key;    
}


